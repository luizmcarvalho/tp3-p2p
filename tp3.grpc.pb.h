// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: tp3.proto
#ifndef GRPC_tp3_2eproto__INCLUDED
#define GRPC_tp3_2eproto__INCLUDED

#include "tp3.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace tp3 {

// Cria o servi
class TP3 GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a greeting
    virtual ::grpc::Status Find(::grpc::ClientContext* context, const ::tp3::FindRequest& request, ::tp3::FindReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tp3::FindReply>> AsyncFind(::grpc::ClientContext* context, const ::tp3::FindRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tp3::FindReply>>(AsyncFindRaw(context, request, cq));
    }
    virtual ::grpc::Status Update(::grpc::ClientContext* context, const ::tp3::UpdateRequest& request, ::tp3::UpdateReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tp3::UpdateReply>> AsyncUpdate(::grpc::ClientContext* context, const ::tp3::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tp3::UpdateReply>>(AsyncUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status Store(::grpc::ClientContext* context, const ::tp3::StoreRequest& request, ::tp3::StoreReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tp3::StoreReply>> AsyncStore(::grpc::ClientContext* context, const ::tp3::StoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tp3::StoreReply>>(AsyncStoreRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tp3::FindReply>* AsyncFindRaw(::grpc::ClientContext* context, const ::tp3::FindRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tp3::UpdateReply>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::tp3::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tp3::StoreReply>* AsyncStoreRaw(::grpc::ClientContext* context, const ::tp3::StoreRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Find(::grpc::ClientContext* context, const ::tp3::FindRequest& request, ::tp3::FindReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tp3::FindReply>> AsyncFind(::grpc::ClientContext* context, const ::tp3::FindRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tp3::FindReply>>(AsyncFindRaw(context, request, cq));
    }
    ::grpc::Status Update(::grpc::ClientContext* context, const ::tp3::UpdateRequest& request, ::tp3::UpdateReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tp3::UpdateReply>> AsyncUpdate(::grpc::ClientContext* context, const ::tp3::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tp3::UpdateReply>>(AsyncUpdateRaw(context, request, cq));
    }
    ::grpc::Status Store(::grpc::ClientContext* context, const ::tp3::StoreRequest& request, ::tp3::StoreReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tp3::StoreReply>> AsyncStore(::grpc::ClientContext* context, const ::tp3::StoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tp3::StoreReply>>(AsyncStoreRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::tp3::FindReply>* AsyncFindRaw(::grpc::ClientContext* context, const ::tp3::FindRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::tp3::UpdateReply>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::tp3::UpdateRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::tp3::StoreReply>* AsyncStoreRaw(::grpc::ClientContext* context, const ::tp3::StoreRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_Find_;
    const ::grpc::RpcMethod rpcmethod_Update_;
    const ::grpc::RpcMethod rpcmethod_Store_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a greeting
    virtual ::grpc::Status Find(::grpc::ServerContext* context, const ::tp3::FindRequest* request, ::tp3::FindReply* response);
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::tp3::UpdateRequest* request, ::tp3::UpdateReply* response);
    virtual ::grpc::Status Store(::grpc::ServerContext* context, const ::tp3::StoreRequest* request, ::tp3::StoreReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Find : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Find() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Find() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Find(::grpc::ServerContext* context, const ::tp3::FindRequest* request, ::tp3::FindReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFind(::grpc::ServerContext* context, ::tp3::FindRequest* request, ::grpc::ServerAsyncResponseWriter< ::tp3::FindReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Update() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::tp3::UpdateRequest* request, ::tp3::UpdateReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::tp3::UpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::tp3::UpdateReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Store() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Store() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Store(::grpc::ServerContext* context, const ::tp3::StoreRequest* request, ::tp3::StoreReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStore(::grpc::ServerContext* context, ::tp3::StoreRequest* request, ::grpc::ServerAsyncResponseWriter< ::tp3::StoreReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Find<WithAsyncMethod_Update<WithAsyncMethod_Store<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Find : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Find() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Find() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Find(::grpc::ServerContext* context, const ::tp3::FindRequest* request, ::tp3::FindReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Update() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::tp3::UpdateRequest* request, ::tp3::UpdateReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Store() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Store() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Store(::grpc::ServerContext* context, const ::tp3::StoreRequest* request, ::tp3::StoreReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace tp3


#endif  // GRPC_tp3_2eproto__INCLUDED
