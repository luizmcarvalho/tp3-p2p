// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tp3.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tp3.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tp3 {

namespace {

const ::google::protobuf::Descriptor* FindRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FindReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tp3_2eproto() {
  protobuf_AddDesc_tp3_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tp3.proto");
  GOOGLE_CHECK(file != NULL);
  FindRequest_descriptor_ = file->message_type(0);
  static const int FindRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindRequest, k_),
  };
  FindRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FindRequest_descriptor_,
      FindRequest::default_instance_,
      FindRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(FindRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindRequest, _is_default_instance_));
  FindReply_descriptor_ = file->message_type(1);
  static const int FindReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindReply, nodes_),
  };
  FindReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FindReply_descriptor_,
      FindReply::default_instance_,
      FindReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(FindReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindReply, _is_default_instance_));
  UpdateRequest_descriptor_ = file->message_type(2);
  static const int UpdateRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRequest, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRequest, v_),
  };
  UpdateRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateRequest_descriptor_,
      UpdateRequest::default_instance_,
      UpdateRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpdateRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRequest, _is_default_instance_));
  UpdateReply_descriptor_ = file->message_type(3);
  static const int UpdateReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateReply, reply_),
  };
  UpdateReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateReply_descriptor_,
      UpdateReply::default_instance_,
      UpdateReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpdateReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateReply, _is_default_instance_));
  StoreRequest_descriptor_ = file->message_type(4);
  static const int StoreRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, v_),
  };
  StoreRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StoreRequest_descriptor_,
      StoreRequest::default_instance_,
      StoreRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(StoreRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, _is_default_instance_));
  StoreReply_descriptor_ = file->message_type(5);
  static const int StoreReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreReply, reply_),
  };
  StoreReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StoreReply_descriptor_,
      StoreReply::default_instance_,
      StoreReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(StoreReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreReply, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tp3_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FindRequest_descriptor_, &FindRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FindReply_descriptor_, &FindReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateRequest_descriptor_, &UpdateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateReply_descriptor_, &UpdateReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StoreRequest_descriptor_, &StoreRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StoreReply_descriptor_, &StoreReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tp3_2eproto() {
  delete FindRequest::default_instance_;
  delete FindRequest_reflection_;
  delete FindReply::default_instance_;
  delete FindReply_reflection_;
  delete UpdateRequest::default_instance_;
  delete UpdateRequest_reflection_;
  delete UpdateReply::default_instance_;
  delete UpdateReply_reflection_;
  delete StoreRequest::default_instance_;
  delete StoreRequest_reflection_;
  delete StoreReply::default_instance_;
  delete StoreReply_reflection_;
}

void protobuf_AddDesc_tp3_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ttp3.proto\022\003tp3\"\030\n\013FindRequest\022\t\n\001k\030\001 \001"
    "(\t\"\032\n\tFindReply\022\r\n\005nodes\030\001 \001(\t\"%\n\rUpdate"
    "Request\022\t\n\001k\030\001 \001(\t\022\t\n\001v\030\002 \001(\t\"\034\n\013UpdateR"
    "eply\022\r\n\005reply\030\001 \001(\t\"$\n\014StoreRequest\022\t\n\001k"
    "\030\001 \001(\t\022\t\n\001v\030\002 \001(\t\"\033\n\nStoreReply\022\r\n\005reply"
    "\030\001 \001(\t2\222\001\n\003TP3\022*\n\004Find\022\020.tp3.FindRequest"
    "\032\016.tp3.FindReply\"\000\0220\n\006Update\022\022.tp3.Updat"
    "eRequest\032\020.tp3.UpdateReply\"\000\022-\n\005Store\022\021."
    "tp3.StoreRequest\032\017.tp3.StoreReply\"\000B+\n\027b"
    "r.cefetmg.sd.12016.tp3B\010TP3ProtoP\001\242\002\003HLW"
    "b\006proto3", 408);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tp3.proto", &protobuf_RegisterTypes);
  FindRequest::default_instance_ = new FindRequest();
  FindReply::default_instance_ = new FindReply();
  UpdateRequest::default_instance_ = new UpdateRequest();
  UpdateReply::default_instance_ = new UpdateReply();
  StoreRequest::default_instance_ = new StoreRequest();
  StoreReply::default_instance_ = new StoreReply();
  FindRequest::default_instance_->InitAsDefaultInstance();
  FindReply::default_instance_->InitAsDefaultInstance();
  UpdateRequest::default_instance_->InitAsDefaultInstance();
  UpdateReply::default_instance_->InitAsDefaultInstance();
  StoreRequest::default_instance_->InitAsDefaultInstance();
  StoreReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tp3_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tp3_2eproto {
  StaticDescriptorInitializer_tp3_2eproto() {
    protobuf_AddDesc_tp3_2eproto();
  }
} static_descriptor_initializer_tp3_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FindRequest::kKFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FindRequest::FindRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tp3.FindRequest)
}

void FindRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FindRequest::FindRequest(const FindRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tp3.FindRequest)
}

void FindRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  k_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FindRequest::~FindRequest() {
  // @@protoc_insertion_point(destructor:tp3.FindRequest)
  SharedDtor();
}

void FindRequest::SharedDtor() {
  k_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FindRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindRequest_descriptor_;
}

const FindRequest& FindRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tp3_2eproto();
  return *default_instance_;
}

FindRequest* FindRequest::default_instance_ = NULL;

FindRequest* FindRequest::New(::google::protobuf::Arena* arena) const {
  FindRequest* n = new FindRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FindRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tp3.FindRequest)
  k_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FindRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tp3.FindRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string k = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_k()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->k().data(), this->k().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tp3.FindRequest.k"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tp3.FindRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tp3.FindRequest)
  return false;
#undef DO_
}

void FindRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tp3.FindRequest)
  // optional string k = 1;
  if (this->k().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->k().data(), this->k().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tp3.FindRequest.k");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->k(), output);
  }

  // @@protoc_insertion_point(serialize_end:tp3.FindRequest)
}

::google::protobuf::uint8* FindRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tp3.FindRequest)
  // optional string k = 1;
  if (this->k().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->k().data(), this->k().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tp3.FindRequest.k");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->k(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tp3.FindRequest)
  return target;
}

int FindRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tp3.FindRequest)
  int total_size = 0;

  // optional string k = 1;
  if (this->k().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->k());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tp3.FindRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FindRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FindRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tp3.FindRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tp3.FindRequest)
    MergeFrom(*source);
  }
}

void FindRequest::MergeFrom(const FindRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tp3.FindRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.k().size() > 0) {

    k_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.k_);
  }
}

void FindRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tp3.FindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindRequest::CopyFrom(const FindRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tp3.FindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindRequest::IsInitialized() const {

  return true;
}

void FindRequest::Swap(FindRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FindRequest::InternalSwap(FindRequest* other) {
  k_.Swap(&other->k_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FindRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindRequest_descriptor_;
  metadata.reflection = FindRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FindRequest

// optional string k = 1;
void FindRequest::clear_k() {
  k_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FindRequest::k() const {
  // @@protoc_insertion_point(field_get:tp3.FindRequest.k)
  return k_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FindRequest::set_k(const ::std::string& value) {
  
  k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tp3.FindRequest.k)
}
 void FindRequest::set_k(const char* value) {
  
  k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tp3.FindRequest.k)
}
 void FindRequest::set_k(const char* value, size_t size) {
  
  k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tp3.FindRequest.k)
}
 ::std::string* FindRequest::mutable_k() {
  
  // @@protoc_insertion_point(field_mutable:tp3.FindRequest.k)
  return k_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FindRequest::release_k() {
  // @@protoc_insertion_point(field_release:tp3.FindRequest.k)
  
  return k_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FindRequest::set_allocated_k(::std::string* k) {
  if (k != NULL) {
    
  } else {
    
  }
  k_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k);
  // @@protoc_insertion_point(field_set_allocated:tp3.FindRequest.k)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FindReply::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FindReply::FindReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tp3.FindReply)
}

void FindReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FindReply::FindReply(const FindReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tp3.FindReply)
}

void FindReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nodes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FindReply::~FindReply() {
  // @@protoc_insertion_point(destructor:tp3.FindReply)
  SharedDtor();
}

void FindReply::SharedDtor() {
  nodes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FindReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindReply_descriptor_;
}

const FindReply& FindReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tp3_2eproto();
  return *default_instance_;
}

FindReply* FindReply::default_instance_ = NULL;

FindReply* FindReply::New(::google::protobuf::Arena* arena) const {
  FindReply* n = new FindReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FindReply::Clear() {
// @@protoc_insertion_point(message_clear_start:tp3.FindReply)
  nodes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FindReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tp3.FindReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nodes = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nodes().data(), this->nodes().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tp3.FindReply.nodes"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tp3.FindReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tp3.FindReply)
  return false;
#undef DO_
}

void FindReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tp3.FindReply)
  // optional string nodes = 1;
  if (this->nodes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nodes().data(), this->nodes().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tp3.FindReply.nodes");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nodes(), output);
  }

  // @@protoc_insertion_point(serialize_end:tp3.FindReply)
}

::google::protobuf::uint8* FindReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tp3.FindReply)
  // optional string nodes = 1;
  if (this->nodes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nodes().data(), this->nodes().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tp3.FindReply.nodes");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nodes(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tp3.FindReply)
  return target;
}

int FindReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tp3.FindReply)
  int total_size = 0;

  // optional string nodes = 1;
  if (this->nodes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nodes());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tp3.FindReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FindReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FindReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tp3.FindReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tp3.FindReply)
    MergeFrom(*source);
  }
}

void FindReply::MergeFrom(const FindReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tp3.FindReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.nodes().size() > 0) {

    nodes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nodes_);
  }
}

void FindReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tp3.FindReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindReply::CopyFrom(const FindReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tp3.FindReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindReply::IsInitialized() const {

  return true;
}

void FindReply::Swap(FindReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FindReply::InternalSwap(FindReply* other) {
  nodes_.Swap(&other->nodes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FindReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindReply_descriptor_;
  metadata.reflection = FindReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FindReply

// optional string nodes = 1;
void FindReply::clear_nodes() {
  nodes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FindReply::nodes() const {
  // @@protoc_insertion_point(field_get:tp3.FindReply.nodes)
  return nodes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FindReply::set_nodes(const ::std::string& value) {
  
  nodes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tp3.FindReply.nodes)
}
 void FindReply::set_nodes(const char* value) {
  
  nodes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tp3.FindReply.nodes)
}
 void FindReply::set_nodes(const char* value, size_t size) {
  
  nodes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tp3.FindReply.nodes)
}
 ::std::string* FindReply::mutable_nodes() {
  
  // @@protoc_insertion_point(field_mutable:tp3.FindReply.nodes)
  return nodes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FindReply::release_nodes() {
  // @@protoc_insertion_point(field_release:tp3.FindReply.nodes)
  
  return nodes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FindReply::set_allocated_nodes(::std::string* nodes) {
  if (nodes != NULL) {
    
  } else {
    
  }
  nodes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nodes);
  // @@protoc_insertion_point(field_set_allocated:tp3.FindReply.nodes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateRequest::kKFieldNumber;
const int UpdateRequest::kVFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateRequest::UpdateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tp3.UpdateRequest)
}

void UpdateRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UpdateRequest::UpdateRequest(const UpdateRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tp3.UpdateRequest)
}

void UpdateRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  k_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UpdateRequest::~UpdateRequest() {
  // @@protoc_insertion_point(destructor:tp3.UpdateRequest)
  SharedDtor();
}

void UpdateRequest::SharedDtor() {
  k_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UpdateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateRequest_descriptor_;
}

const UpdateRequest& UpdateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tp3_2eproto();
  return *default_instance_;
}

UpdateRequest* UpdateRequest::default_instance_ = NULL;

UpdateRequest* UpdateRequest::New(::google::protobuf::Arena* arena) const {
  UpdateRequest* n = new UpdateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tp3.UpdateRequest)
  k_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tp3.UpdateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string k = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_k()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->k().data(), this->k().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tp3.UpdateRequest.k"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_v;
        break;
      }

      // optional string v = 2;
      case 2: {
        if (tag == 18) {
         parse_v:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_v()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->v().data(), this->v().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tp3.UpdateRequest.v"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tp3.UpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tp3.UpdateRequest)
  return false;
#undef DO_
}

void UpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tp3.UpdateRequest)
  // optional string k = 1;
  if (this->k().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->k().data(), this->k().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tp3.UpdateRequest.k");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->k(), output);
  }

  // optional string v = 2;
  if (this->v().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->v().data(), this->v().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tp3.UpdateRequest.v");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->v(), output);
  }

  // @@protoc_insertion_point(serialize_end:tp3.UpdateRequest)
}

::google::protobuf::uint8* UpdateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tp3.UpdateRequest)
  // optional string k = 1;
  if (this->k().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->k().data(), this->k().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tp3.UpdateRequest.k");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->k(), target);
  }

  // optional string v = 2;
  if (this->v().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->v().data(), this->v().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tp3.UpdateRequest.v");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->v(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tp3.UpdateRequest)
  return target;
}

int UpdateRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tp3.UpdateRequest)
  int total_size = 0;

  // optional string k = 1;
  if (this->k().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->k());
  }

  // optional string v = 2;
  if (this->v().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->v());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tp3.UpdateRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UpdateRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tp3.UpdateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tp3.UpdateRequest)
    MergeFrom(*source);
  }
}

void UpdateRequest::MergeFrom(const UpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tp3.UpdateRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.k().size() > 0) {

    k_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.k_);
  }
  if (from.v().size() > 0) {

    v_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.v_);
  }
}

void UpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tp3.UpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRequest::CopyFrom(const UpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tp3.UpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRequest::IsInitialized() const {

  return true;
}

void UpdateRequest::Swap(UpdateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateRequest::InternalSwap(UpdateRequest* other) {
  k_.Swap(&other->k_);
  v_.Swap(&other->v_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateRequest_descriptor_;
  metadata.reflection = UpdateRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateRequest

// optional string k = 1;
void UpdateRequest::clear_k() {
  k_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UpdateRequest::k() const {
  // @@protoc_insertion_point(field_get:tp3.UpdateRequest.k)
  return k_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpdateRequest::set_k(const ::std::string& value) {
  
  k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tp3.UpdateRequest.k)
}
 void UpdateRequest::set_k(const char* value) {
  
  k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tp3.UpdateRequest.k)
}
 void UpdateRequest::set_k(const char* value, size_t size) {
  
  k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tp3.UpdateRequest.k)
}
 ::std::string* UpdateRequest::mutable_k() {
  
  // @@protoc_insertion_point(field_mutable:tp3.UpdateRequest.k)
  return k_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UpdateRequest::release_k() {
  // @@protoc_insertion_point(field_release:tp3.UpdateRequest.k)
  
  return k_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpdateRequest::set_allocated_k(::std::string* k) {
  if (k != NULL) {
    
  } else {
    
  }
  k_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k);
  // @@protoc_insertion_point(field_set_allocated:tp3.UpdateRequest.k)
}

// optional string v = 2;
void UpdateRequest::clear_v() {
  v_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UpdateRequest::v() const {
  // @@protoc_insertion_point(field_get:tp3.UpdateRequest.v)
  return v_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpdateRequest::set_v(const ::std::string& value) {
  
  v_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tp3.UpdateRequest.v)
}
 void UpdateRequest::set_v(const char* value) {
  
  v_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tp3.UpdateRequest.v)
}
 void UpdateRequest::set_v(const char* value, size_t size) {
  
  v_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tp3.UpdateRequest.v)
}
 ::std::string* UpdateRequest::mutable_v() {
  
  // @@protoc_insertion_point(field_mutable:tp3.UpdateRequest.v)
  return v_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UpdateRequest::release_v() {
  // @@protoc_insertion_point(field_release:tp3.UpdateRequest.v)
  
  return v_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpdateRequest::set_allocated_v(::std::string* v) {
  if (v != NULL) {
    
  } else {
    
  }
  v_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), v);
  // @@protoc_insertion_point(field_set_allocated:tp3.UpdateRequest.v)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateReply::kReplyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateReply::UpdateReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tp3.UpdateReply)
}

void UpdateReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UpdateReply::UpdateReply(const UpdateReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tp3.UpdateReply)
}

void UpdateReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  reply_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UpdateReply::~UpdateReply() {
  // @@protoc_insertion_point(destructor:tp3.UpdateReply)
  SharedDtor();
}

void UpdateReply::SharedDtor() {
  reply_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UpdateReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateReply_descriptor_;
}

const UpdateReply& UpdateReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tp3_2eproto();
  return *default_instance_;
}

UpdateReply* UpdateReply::default_instance_ = NULL;

UpdateReply* UpdateReply::New(::google::protobuf::Arena* arena) const {
  UpdateReply* n = new UpdateReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateReply::Clear() {
// @@protoc_insertion_point(message_clear_start:tp3.UpdateReply)
  reply_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UpdateReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tp3.UpdateReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string reply = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reply()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reply().data(), this->reply().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tp3.UpdateReply.reply"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tp3.UpdateReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tp3.UpdateReply)
  return false;
#undef DO_
}

void UpdateReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tp3.UpdateReply)
  // optional string reply = 1;
  if (this->reply().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reply().data(), this->reply().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tp3.UpdateReply.reply");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reply(), output);
  }

  // @@protoc_insertion_point(serialize_end:tp3.UpdateReply)
}

::google::protobuf::uint8* UpdateReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tp3.UpdateReply)
  // optional string reply = 1;
  if (this->reply().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reply().data(), this->reply().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tp3.UpdateReply.reply");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reply(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tp3.UpdateReply)
  return target;
}

int UpdateReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tp3.UpdateReply)
  int total_size = 0;

  // optional string reply = 1;
  if (this->reply().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reply());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tp3.UpdateReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UpdateReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tp3.UpdateReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tp3.UpdateReply)
    MergeFrom(*source);
  }
}

void UpdateReply::MergeFrom(const UpdateReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tp3.UpdateReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.reply().size() > 0) {

    reply_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reply_);
  }
}

void UpdateReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tp3.UpdateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateReply::CopyFrom(const UpdateReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tp3.UpdateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateReply::IsInitialized() const {

  return true;
}

void UpdateReply::Swap(UpdateReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateReply::InternalSwap(UpdateReply* other) {
  reply_.Swap(&other->reply_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateReply_descriptor_;
  metadata.reflection = UpdateReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateReply

// optional string reply = 1;
void UpdateReply::clear_reply() {
  reply_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UpdateReply::reply() const {
  // @@protoc_insertion_point(field_get:tp3.UpdateReply.reply)
  return reply_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpdateReply::set_reply(const ::std::string& value) {
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tp3.UpdateReply.reply)
}
 void UpdateReply::set_reply(const char* value) {
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tp3.UpdateReply.reply)
}
 void UpdateReply::set_reply(const char* value, size_t size) {
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tp3.UpdateReply.reply)
}
 ::std::string* UpdateReply::mutable_reply() {
  
  // @@protoc_insertion_point(field_mutable:tp3.UpdateReply.reply)
  return reply_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UpdateReply::release_reply() {
  // @@protoc_insertion_point(field_release:tp3.UpdateReply.reply)
  
  return reply_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpdateReply::set_allocated_reply(::std::string* reply) {
  if (reply != NULL) {
    
  } else {
    
  }
  reply_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reply);
  // @@protoc_insertion_point(field_set_allocated:tp3.UpdateReply.reply)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreRequest::kKFieldNumber;
const int StoreRequest::kVFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreRequest::StoreRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tp3.StoreRequest)
}

void StoreRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StoreRequest::StoreRequest(const StoreRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tp3.StoreRequest)
}

void StoreRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  k_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StoreRequest::~StoreRequest() {
  // @@protoc_insertion_point(destructor:tp3.StoreRequest)
  SharedDtor();
}

void StoreRequest::SharedDtor() {
  k_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StoreRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreRequest_descriptor_;
}

const StoreRequest& StoreRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tp3_2eproto();
  return *default_instance_;
}

StoreRequest* StoreRequest::default_instance_ = NULL;

StoreRequest* StoreRequest::New(::google::protobuf::Arena* arena) const {
  StoreRequest* n = new StoreRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StoreRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tp3.StoreRequest)
  k_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tp3.StoreRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string k = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_k()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->k().data(), this->k().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tp3.StoreRequest.k"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_v;
        break;
      }

      // optional string v = 2;
      case 2: {
        if (tag == 18) {
         parse_v:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_v()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->v().data(), this->v().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tp3.StoreRequest.v"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tp3.StoreRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tp3.StoreRequest)
  return false;
#undef DO_
}

void StoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tp3.StoreRequest)
  // optional string k = 1;
  if (this->k().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->k().data(), this->k().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tp3.StoreRequest.k");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->k(), output);
  }

  // optional string v = 2;
  if (this->v().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->v().data(), this->v().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tp3.StoreRequest.v");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->v(), output);
  }

  // @@protoc_insertion_point(serialize_end:tp3.StoreRequest)
}

::google::protobuf::uint8* StoreRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tp3.StoreRequest)
  // optional string k = 1;
  if (this->k().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->k().data(), this->k().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tp3.StoreRequest.k");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->k(), target);
  }

  // optional string v = 2;
  if (this->v().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->v().data(), this->v().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tp3.StoreRequest.v");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->v(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tp3.StoreRequest)
  return target;
}

int StoreRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tp3.StoreRequest)
  int total_size = 0;

  // optional string k = 1;
  if (this->k().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->k());
  }

  // optional string v = 2;
  if (this->v().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->v());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tp3.StoreRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StoreRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StoreRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tp3.StoreRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tp3.StoreRequest)
    MergeFrom(*source);
  }
}

void StoreRequest::MergeFrom(const StoreRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tp3.StoreRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.k().size() > 0) {

    k_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.k_);
  }
  if (from.v().size() > 0) {

    v_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.v_);
  }
}

void StoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tp3.StoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreRequest::CopyFrom(const StoreRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tp3.StoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreRequest::IsInitialized() const {

  return true;
}

void StoreRequest::Swap(StoreRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreRequest::InternalSwap(StoreRequest* other) {
  k_.Swap(&other->k_);
  v_.Swap(&other->v_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StoreRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreRequest_descriptor_;
  metadata.reflection = StoreRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StoreRequest

// optional string k = 1;
void StoreRequest::clear_k() {
  k_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StoreRequest::k() const {
  // @@protoc_insertion_point(field_get:tp3.StoreRequest.k)
  return k_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StoreRequest::set_k(const ::std::string& value) {
  
  k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tp3.StoreRequest.k)
}
 void StoreRequest::set_k(const char* value) {
  
  k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tp3.StoreRequest.k)
}
 void StoreRequest::set_k(const char* value, size_t size) {
  
  k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tp3.StoreRequest.k)
}
 ::std::string* StoreRequest::mutable_k() {
  
  // @@protoc_insertion_point(field_mutable:tp3.StoreRequest.k)
  return k_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StoreRequest::release_k() {
  // @@protoc_insertion_point(field_release:tp3.StoreRequest.k)
  
  return k_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StoreRequest::set_allocated_k(::std::string* k) {
  if (k != NULL) {
    
  } else {
    
  }
  k_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k);
  // @@protoc_insertion_point(field_set_allocated:tp3.StoreRequest.k)
}

// optional string v = 2;
void StoreRequest::clear_v() {
  v_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StoreRequest::v() const {
  // @@protoc_insertion_point(field_get:tp3.StoreRequest.v)
  return v_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StoreRequest::set_v(const ::std::string& value) {
  
  v_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tp3.StoreRequest.v)
}
 void StoreRequest::set_v(const char* value) {
  
  v_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tp3.StoreRequest.v)
}
 void StoreRequest::set_v(const char* value, size_t size) {
  
  v_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tp3.StoreRequest.v)
}
 ::std::string* StoreRequest::mutable_v() {
  
  // @@protoc_insertion_point(field_mutable:tp3.StoreRequest.v)
  return v_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StoreRequest::release_v() {
  // @@protoc_insertion_point(field_release:tp3.StoreRequest.v)
  
  return v_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StoreRequest::set_allocated_v(::std::string* v) {
  if (v != NULL) {
    
  } else {
    
  }
  v_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), v);
  // @@protoc_insertion_point(field_set_allocated:tp3.StoreRequest.v)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreReply::kReplyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreReply::StoreReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tp3.StoreReply)
}

void StoreReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StoreReply::StoreReply(const StoreReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tp3.StoreReply)
}

void StoreReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  reply_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StoreReply::~StoreReply() {
  // @@protoc_insertion_point(destructor:tp3.StoreReply)
  SharedDtor();
}

void StoreReply::SharedDtor() {
  reply_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StoreReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreReply_descriptor_;
}

const StoreReply& StoreReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tp3_2eproto();
  return *default_instance_;
}

StoreReply* StoreReply::default_instance_ = NULL;

StoreReply* StoreReply::New(::google::protobuf::Arena* arena) const {
  StoreReply* n = new StoreReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StoreReply::Clear() {
// @@protoc_insertion_point(message_clear_start:tp3.StoreReply)
  reply_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StoreReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tp3.StoreReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string reply = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reply()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reply().data(), this->reply().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tp3.StoreReply.reply"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tp3.StoreReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tp3.StoreReply)
  return false;
#undef DO_
}

void StoreReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tp3.StoreReply)
  // optional string reply = 1;
  if (this->reply().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reply().data(), this->reply().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tp3.StoreReply.reply");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reply(), output);
  }

  // @@protoc_insertion_point(serialize_end:tp3.StoreReply)
}

::google::protobuf::uint8* StoreReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tp3.StoreReply)
  // optional string reply = 1;
  if (this->reply().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reply().data(), this->reply().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tp3.StoreReply.reply");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reply(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tp3.StoreReply)
  return target;
}

int StoreReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tp3.StoreReply)
  int total_size = 0;

  // optional string reply = 1;
  if (this->reply().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reply());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tp3.StoreReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StoreReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StoreReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tp3.StoreReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tp3.StoreReply)
    MergeFrom(*source);
  }
}

void StoreReply::MergeFrom(const StoreReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tp3.StoreReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.reply().size() > 0) {

    reply_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reply_);
  }
}

void StoreReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tp3.StoreReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreReply::CopyFrom(const StoreReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tp3.StoreReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreReply::IsInitialized() const {

  return true;
}

void StoreReply::Swap(StoreReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreReply::InternalSwap(StoreReply* other) {
  reply_.Swap(&other->reply_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StoreReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreReply_descriptor_;
  metadata.reflection = StoreReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StoreReply

// optional string reply = 1;
void StoreReply::clear_reply() {
  reply_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StoreReply::reply() const {
  // @@protoc_insertion_point(field_get:tp3.StoreReply.reply)
  return reply_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StoreReply::set_reply(const ::std::string& value) {
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tp3.StoreReply.reply)
}
 void StoreReply::set_reply(const char* value) {
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tp3.StoreReply.reply)
}
 void StoreReply::set_reply(const char* value, size_t size) {
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tp3.StoreReply.reply)
}
 ::std::string* StoreReply::mutable_reply() {
  
  // @@protoc_insertion_point(field_mutable:tp3.StoreReply.reply)
  return reply_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StoreReply::release_reply() {
  // @@protoc_insertion_point(field_release:tp3.StoreReply.reply)
  
  return reply_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StoreReply::set_allocated_reply(::std::string* reply) {
  if (reply != NULL) {
    
  } else {
    
  }
  reply_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reply);
  // @@protoc_insertion_point(field_set_allocated:tp3.StoreReply.reply)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tp3

// @@protoc_insertion_point(global_scope)
