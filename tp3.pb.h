// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tp3.proto

#ifndef PROTOBUF_tp3_2eproto__INCLUDED
#define PROTOBUF_tp3_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tp3 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tp3_2eproto();
void protobuf_AssignDesc_tp3_2eproto();
void protobuf_ShutdownFile_tp3_2eproto();

class FindReply;
class FindRequest;
class StoreReply;
class StoreRequest;
class UpdateReply;
class UpdateRequest;

// ===================================================================

class FindRequest : public ::google::protobuf::Message {
 public:
  FindRequest();
  virtual ~FindRequest();

  FindRequest(const FindRequest& from);

  inline FindRequest& operator=(const FindRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FindRequest& default_instance();

  void Swap(FindRequest* other);

  // implements Message ----------------------------------------------

  inline FindRequest* New() const { return New(NULL); }

  FindRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FindRequest& from);
  void MergeFrom(const FindRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FindRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string k = 1;
  void clear_k();
  static const int kKFieldNumber = 1;
  const ::std::string& k() const;
  void set_k(const ::std::string& value);
  void set_k(const char* value);
  void set_k(const char* value, size_t size);
  ::std::string* mutable_k();
  ::std::string* release_k();
  void set_allocated_k(::std::string* k);

  // @@protoc_insertion_point(class_scope:tp3.FindRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr k_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tp3_2eproto();
  friend void protobuf_AssignDesc_tp3_2eproto();
  friend void protobuf_ShutdownFile_tp3_2eproto();

  void InitAsDefaultInstance();
  static FindRequest* default_instance_;
};
// -------------------------------------------------------------------

class FindReply : public ::google::protobuf::Message {
 public:
  FindReply();
  virtual ~FindReply();

  FindReply(const FindReply& from);

  inline FindReply& operator=(const FindReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FindReply& default_instance();

  void Swap(FindReply* other);

  // implements Message ----------------------------------------------

  inline FindReply* New() const { return New(NULL); }

  FindReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FindReply& from);
  void MergeFrom(const FindReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FindReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string nodes = 1;
  void clear_nodes();
  static const int kNodesFieldNumber = 1;
  const ::std::string& nodes() const;
  void set_nodes(const ::std::string& value);
  void set_nodes(const char* value);
  void set_nodes(const char* value, size_t size);
  ::std::string* mutable_nodes();
  ::std::string* release_nodes();
  void set_allocated_nodes(::std::string* nodes);

  // @@protoc_insertion_point(class_scope:tp3.FindReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr nodes_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tp3_2eproto();
  friend void protobuf_AssignDesc_tp3_2eproto();
  friend void protobuf_ShutdownFile_tp3_2eproto();

  void InitAsDefaultInstance();
  static FindReply* default_instance_;
};
// -------------------------------------------------------------------

class UpdateRequest : public ::google::protobuf::Message {
 public:
  UpdateRequest();
  virtual ~UpdateRequest();

  UpdateRequest(const UpdateRequest& from);

  inline UpdateRequest& operator=(const UpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateRequest& default_instance();

  void Swap(UpdateRequest* other);

  // implements Message ----------------------------------------------

  inline UpdateRequest* New() const { return New(NULL); }

  UpdateRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateRequest& from);
  void MergeFrom(const UpdateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpdateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string k = 1;
  void clear_k();
  static const int kKFieldNumber = 1;
  const ::std::string& k() const;
  void set_k(const ::std::string& value);
  void set_k(const char* value);
  void set_k(const char* value, size_t size);
  ::std::string* mutable_k();
  ::std::string* release_k();
  void set_allocated_k(::std::string* k);

  // optional string v = 2;
  void clear_v();
  static const int kVFieldNumber = 2;
  const ::std::string& v() const;
  void set_v(const ::std::string& value);
  void set_v(const char* value);
  void set_v(const char* value, size_t size);
  ::std::string* mutable_v();
  ::std::string* release_v();
  void set_allocated_v(::std::string* v);

  // @@protoc_insertion_point(class_scope:tp3.UpdateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr k_;
  ::google::protobuf::internal::ArenaStringPtr v_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tp3_2eproto();
  friend void protobuf_AssignDesc_tp3_2eproto();
  friend void protobuf_ShutdownFile_tp3_2eproto();

  void InitAsDefaultInstance();
  static UpdateRequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdateReply : public ::google::protobuf::Message {
 public:
  UpdateReply();
  virtual ~UpdateReply();

  UpdateReply(const UpdateReply& from);

  inline UpdateReply& operator=(const UpdateReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateReply& default_instance();

  void Swap(UpdateReply* other);

  // implements Message ----------------------------------------------

  inline UpdateReply* New() const { return New(NULL); }

  UpdateReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateReply& from);
  void MergeFrom(const UpdateReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpdateReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string reply = 1;
  void clear_reply();
  static const int kReplyFieldNumber = 1;
  const ::std::string& reply() const;
  void set_reply(const ::std::string& value);
  void set_reply(const char* value);
  void set_reply(const char* value, size_t size);
  ::std::string* mutable_reply();
  ::std::string* release_reply();
  void set_allocated_reply(::std::string* reply);

  // @@protoc_insertion_point(class_scope:tp3.UpdateReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr reply_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tp3_2eproto();
  friend void protobuf_AssignDesc_tp3_2eproto();
  friend void protobuf_ShutdownFile_tp3_2eproto();

  void InitAsDefaultInstance();
  static UpdateReply* default_instance_;
};
// -------------------------------------------------------------------

class StoreRequest : public ::google::protobuf::Message {
 public:
  StoreRequest();
  virtual ~StoreRequest();

  StoreRequest(const StoreRequest& from);

  inline StoreRequest& operator=(const StoreRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreRequest& default_instance();

  void Swap(StoreRequest* other);

  // implements Message ----------------------------------------------

  inline StoreRequest* New() const { return New(NULL); }

  StoreRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreRequest& from);
  void MergeFrom(const StoreRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StoreRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string k = 1;
  void clear_k();
  static const int kKFieldNumber = 1;
  const ::std::string& k() const;
  void set_k(const ::std::string& value);
  void set_k(const char* value);
  void set_k(const char* value, size_t size);
  ::std::string* mutable_k();
  ::std::string* release_k();
  void set_allocated_k(::std::string* k);

  // optional string v = 2;
  void clear_v();
  static const int kVFieldNumber = 2;
  const ::std::string& v() const;
  void set_v(const ::std::string& value);
  void set_v(const char* value);
  void set_v(const char* value, size_t size);
  ::std::string* mutable_v();
  ::std::string* release_v();
  void set_allocated_v(::std::string* v);

  // @@protoc_insertion_point(class_scope:tp3.StoreRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr k_;
  ::google::protobuf::internal::ArenaStringPtr v_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tp3_2eproto();
  friend void protobuf_AssignDesc_tp3_2eproto();
  friend void protobuf_ShutdownFile_tp3_2eproto();

  void InitAsDefaultInstance();
  static StoreRequest* default_instance_;
};
// -------------------------------------------------------------------

class StoreReply : public ::google::protobuf::Message {
 public:
  StoreReply();
  virtual ~StoreReply();

  StoreReply(const StoreReply& from);

  inline StoreReply& operator=(const StoreReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreReply& default_instance();

  void Swap(StoreReply* other);

  // implements Message ----------------------------------------------

  inline StoreReply* New() const { return New(NULL); }

  StoreReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreReply& from);
  void MergeFrom(const StoreReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StoreReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string reply = 1;
  void clear_reply();
  static const int kReplyFieldNumber = 1;
  const ::std::string& reply() const;
  void set_reply(const ::std::string& value);
  void set_reply(const char* value);
  void set_reply(const char* value, size_t size);
  ::std::string* mutable_reply();
  ::std::string* release_reply();
  void set_allocated_reply(::std::string* reply);

  // @@protoc_insertion_point(class_scope:tp3.StoreReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr reply_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tp3_2eproto();
  friend void protobuf_AssignDesc_tp3_2eproto();
  friend void protobuf_ShutdownFile_tp3_2eproto();

  void InitAsDefaultInstance();
  static StoreReply* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FindRequest

// optional string k = 1;
inline void FindRequest::clear_k() {
  k_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FindRequest::k() const {
  // @@protoc_insertion_point(field_get:tp3.FindRequest.k)
  return k_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FindRequest::set_k(const ::std::string& value) {
  
  k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tp3.FindRequest.k)
}
inline void FindRequest::set_k(const char* value) {
  
  k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tp3.FindRequest.k)
}
inline void FindRequest::set_k(const char* value, size_t size) {
  
  k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tp3.FindRequest.k)
}
inline ::std::string* FindRequest::mutable_k() {
  
  // @@protoc_insertion_point(field_mutable:tp3.FindRequest.k)
  return k_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FindRequest::release_k() {
  // @@protoc_insertion_point(field_release:tp3.FindRequest.k)
  
  return k_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FindRequest::set_allocated_k(::std::string* k) {
  if (k != NULL) {
    
  } else {
    
  }
  k_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k);
  // @@protoc_insertion_point(field_set_allocated:tp3.FindRequest.k)
}

// -------------------------------------------------------------------

// FindReply

// optional string nodes = 1;
inline void FindReply::clear_nodes() {
  nodes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FindReply::nodes() const {
  // @@protoc_insertion_point(field_get:tp3.FindReply.nodes)
  return nodes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FindReply::set_nodes(const ::std::string& value) {
  
  nodes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tp3.FindReply.nodes)
}
inline void FindReply::set_nodes(const char* value) {
  
  nodes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tp3.FindReply.nodes)
}
inline void FindReply::set_nodes(const char* value, size_t size) {
  
  nodes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tp3.FindReply.nodes)
}
inline ::std::string* FindReply::mutable_nodes() {
  
  // @@protoc_insertion_point(field_mutable:tp3.FindReply.nodes)
  return nodes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FindReply::release_nodes() {
  // @@protoc_insertion_point(field_release:tp3.FindReply.nodes)
  
  return nodes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FindReply::set_allocated_nodes(::std::string* nodes) {
  if (nodes != NULL) {
    
  } else {
    
  }
  nodes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nodes);
  // @@protoc_insertion_point(field_set_allocated:tp3.FindReply.nodes)
}

// -------------------------------------------------------------------

// UpdateRequest

// optional string k = 1;
inline void UpdateRequest::clear_k() {
  k_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateRequest::k() const {
  // @@protoc_insertion_point(field_get:tp3.UpdateRequest.k)
  return k_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRequest::set_k(const ::std::string& value) {
  
  k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tp3.UpdateRequest.k)
}
inline void UpdateRequest::set_k(const char* value) {
  
  k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tp3.UpdateRequest.k)
}
inline void UpdateRequest::set_k(const char* value, size_t size) {
  
  k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tp3.UpdateRequest.k)
}
inline ::std::string* UpdateRequest::mutable_k() {
  
  // @@protoc_insertion_point(field_mutable:tp3.UpdateRequest.k)
  return k_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateRequest::release_k() {
  // @@protoc_insertion_point(field_release:tp3.UpdateRequest.k)
  
  return k_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRequest::set_allocated_k(::std::string* k) {
  if (k != NULL) {
    
  } else {
    
  }
  k_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k);
  // @@protoc_insertion_point(field_set_allocated:tp3.UpdateRequest.k)
}

// optional string v = 2;
inline void UpdateRequest::clear_v() {
  v_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateRequest::v() const {
  // @@protoc_insertion_point(field_get:tp3.UpdateRequest.v)
  return v_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRequest::set_v(const ::std::string& value) {
  
  v_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tp3.UpdateRequest.v)
}
inline void UpdateRequest::set_v(const char* value) {
  
  v_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tp3.UpdateRequest.v)
}
inline void UpdateRequest::set_v(const char* value, size_t size) {
  
  v_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tp3.UpdateRequest.v)
}
inline ::std::string* UpdateRequest::mutable_v() {
  
  // @@protoc_insertion_point(field_mutable:tp3.UpdateRequest.v)
  return v_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateRequest::release_v() {
  // @@protoc_insertion_point(field_release:tp3.UpdateRequest.v)
  
  return v_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRequest::set_allocated_v(::std::string* v) {
  if (v != NULL) {
    
  } else {
    
  }
  v_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), v);
  // @@protoc_insertion_point(field_set_allocated:tp3.UpdateRequest.v)
}

// -------------------------------------------------------------------

// UpdateReply

// optional string reply = 1;
inline void UpdateReply::clear_reply() {
  reply_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateReply::reply() const {
  // @@protoc_insertion_point(field_get:tp3.UpdateReply.reply)
  return reply_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateReply::set_reply(const ::std::string& value) {
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tp3.UpdateReply.reply)
}
inline void UpdateReply::set_reply(const char* value) {
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tp3.UpdateReply.reply)
}
inline void UpdateReply::set_reply(const char* value, size_t size) {
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tp3.UpdateReply.reply)
}
inline ::std::string* UpdateReply::mutable_reply() {
  
  // @@protoc_insertion_point(field_mutable:tp3.UpdateReply.reply)
  return reply_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateReply::release_reply() {
  // @@protoc_insertion_point(field_release:tp3.UpdateReply.reply)
  
  return reply_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateReply::set_allocated_reply(::std::string* reply) {
  if (reply != NULL) {
    
  } else {
    
  }
  reply_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reply);
  // @@protoc_insertion_point(field_set_allocated:tp3.UpdateReply.reply)
}

// -------------------------------------------------------------------

// StoreRequest

// optional string k = 1;
inline void StoreRequest::clear_k() {
  k_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StoreRequest::k() const {
  // @@protoc_insertion_point(field_get:tp3.StoreRequest.k)
  return k_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoreRequest::set_k(const ::std::string& value) {
  
  k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tp3.StoreRequest.k)
}
inline void StoreRequest::set_k(const char* value) {
  
  k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tp3.StoreRequest.k)
}
inline void StoreRequest::set_k(const char* value, size_t size) {
  
  k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tp3.StoreRequest.k)
}
inline ::std::string* StoreRequest::mutable_k() {
  
  // @@protoc_insertion_point(field_mutable:tp3.StoreRequest.k)
  return k_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StoreRequest::release_k() {
  // @@protoc_insertion_point(field_release:tp3.StoreRequest.k)
  
  return k_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoreRequest::set_allocated_k(::std::string* k) {
  if (k != NULL) {
    
  } else {
    
  }
  k_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k);
  // @@protoc_insertion_point(field_set_allocated:tp3.StoreRequest.k)
}

// optional string v = 2;
inline void StoreRequest::clear_v() {
  v_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StoreRequest::v() const {
  // @@protoc_insertion_point(field_get:tp3.StoreRequest.v)
  return v_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoreRequest::set_v(const ::std::string& value) {
  
  v_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tp3.StoreRequest.v)
}
inline void StoreRequest::set_v(const char* value) {
  
  v_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tp3.StoreRequest.v)
}
inline void StoreRequest::set_v(const char* value, size_t size) {
  
  v_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tp3.StoreRequest.v)
}
inline ::std::string* StoreRequest::mutable_v() {
  
  // @@protoc_insertion_point(field_mutable:tp3.StoreRequest.v)
  return v_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StoreRequest::release_v() {
  // @@protoc_insertion_point(field_release:tp3.StoreRequest.v)
  
  return v_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoreRequest::set_allocated_v(::std::string* v) {
  if (v != NULL) {
    
  } else {
    
  }
  v_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), v);
  // @@protoc_insertion_point(field_set_allocated:tp3.StoreRequest.v)
}

// -------------------------------------------------------------------

// StoreReply

// optional string reply = 1;
inline void StoreReply::clear_reply() {
  reply_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StoreReply::reply() const {
  // @@protoc_insertion_point(field_get:tp3.StoreReply.reply)
  return reply_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoreReply::set_reply(const ::std::string& value) {
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tp3.StoreReply.reply)
}
inline void StoreReply::set_reply(const char* value) {
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tp3.StoreReply.reply)
}
inline void StoreReply::set_reply(const char* value, size_t size) {
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tp3.StoreReply.reply)
}
inline ::std::string* StoreReply::mutable_reply() {
  
  // @@protoc_insertion_point(field_mutable:tp3.StoreReply.reply)
  return reply_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StoreReply::release_reply() {
  // @@protoc_insertion_point(field_release:tp3.StoreReply.reply)
  
  return reply_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoreReply::set_allocated_reply(::std::string* reply) {
  if (reply != NULL) {
    
  } else {
    
  }
  reply_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reply);
  // @@protoc_insertion_point(field_set_allocated:tp3.StoreReply.reply)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tp3

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tp3_2eproto__INCLUDED
